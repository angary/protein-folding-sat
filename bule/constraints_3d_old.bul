% Generate the grid from the width
width[W] :: #ground coordinate[0..W - 1].
coordinate[I], coordinate[J], coordinate[K] :: #ground grid[c(I, J, K)].

% Generate adjacent points
coordinate[I], coordinate[I + 1] :: #ground next_coordinate[I, I + 1].
coordinate[I], coordinate[J], next_coordinate[K, L] :: #ground adjacent[c(I, J, K), c(I, J, L)]. % Right (x)
coordinate[I], coordinate[J], next_coordinate[K, L] :: #ground adjacent[c(I, K, J), c(I, L, J)]. % Down (y)
coordinate[I], coordinate[J], next_coordinate[K, L] :: #ground adjacent[c(K, I, J), c(L, I, J)]. % Bottom (z)

% Ensuring Legal Embeddings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% If x(i, j) is true, then the character at position i in the sequence is 
% assigned to point j in the grid
sequence[I, B], grid[G] :: #exists[0] x(I, G).
sequence[I, B], grid[G] :: #hide x(I, G), ~x(I, G).

% Every character in the sequence is assigned to some point in G
sequence[I, B] :: grid[G] : x(I, G).

% No character-position in the sequence can be assigned to more than one point
sequence[I, B], grid[G1], grid[G2], G1 < G2:: ~x(I, G1) | ~x(I, G2).

% No point in the grid can have more than one character-position assigned to it
grid[G], sequence[I1, B1], sequence[I2, B2], I1 < I2:: ~x(I1, G) | ~x(I2, G).

% Every adjacent pair of character positions must be placed on adjacent points in the grid
sequence[I, B1], sequence[I + 1, B2], grid[G1] :: ~x(I, G1) | adjacent[G1, G2] : x(I + 1, G2) | adjacent[G3, G1] : x(I + 1, G3).

% Identifying Potential Contacts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
grid[G] :: #exists[0] is_one(G).
grid[G] :: #hide ~is_one(G).

grid[G], sequence[I, 1] :: ~x(I, G) | is_one(G).
grid[G] :: sequence[I, 1] : x(I, G) | ~is_one(G).

adjacent[G1, G2] :: #exists[0] var(contact(G1, G2)).
adjacent[G1, G2] :: #hide var(contact(G1, G2)), ~var(contact(G1, G2)).

adjacent[G1, G2] :: ~var(contact(G1, G2)) | is_one(G1) .
adjacent[G1, G2] :: ~var(contact(G1, G2)) | is_one(G2).
adjacent[G1, G2] :: var(contact(G1, G2)) | ~is_one(G1) | ~is_one(G2).

% Counting Potential Contacts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

adjacent[G1, G2] :: #ground cardinality_var[0, contact(G1, G2)].
goal[C] :: #ground cardinality_bound[0, C].
